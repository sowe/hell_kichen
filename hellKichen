#!/bin/bash

set -e
set -u

#Global Var
TIMER=''
JOB=''
KETTLE_HOME='$HOME/repos/bi-config/environment/dev'
KETTLE_JNDI_ROOT=''
DEBUGLEVEL=''
LOGNAME=''
ENVIROMENT="$HOME/repos/bi-config/environment/dev"
LOCK=''

#special Var
kettle_path=''
kettle_log=''

# initial configuration for hellkichen
function setPath()
{
   if [ ! -f "$KETTLE_HOME/hellkitchen.properties" ]; then
     echo "kettle_path=/foler_with_pdi/" >> ${KETTLE_HOME}/hellkitchen.properties;
     echo "kettle_log=/tmp/logs/" >> ${KETTLE_HOME}/hellkitchen.properties;
     _die "you need define the pdi/kettle path and log" 12
   fi
   source "$KETTLE_HOME/hellkitchen.properties"

  if [ -z "$kettle_path" ]; then
   source  "$KETTLE_HOME/hellkitchen.properties"
  fi

  if [ -z "$kettle_log" ]; then
   source  "$KETTLE_HOME/hellkitchen.properties"
  fi

}

# set the enviromet live,pre,docker
function setEnvironment()
{
    local environment=${1:-''}
    export KETTLE_HOME=$environment
    export KETTLE_JNDI_ROOT=$KETTLE_HOME
}

function _console(){
    local message=${1:-''}
    [[ -n "$message" ]] && echo -e "$message"
}

function _die(){
    local message=${1:-''}
    local exit_code=${2:-0}
    _console "$message"
    exit $exit_code
}

function timer(){
 export TIMER='time';
}

function _create_mutex(){
  local lock_file=${1:- '/tmp/$lock_name.lock'}
  lockfile -r 0 $lock_file || exit 1
}

function _remove_mutex(){
  local lock_file=${1:- '/tmp/$lock_name.lock'}
  rm -f $lock_file
}

function help(){
cat <<EOF
    Usage: hells_kitchen.sh <[options]>
    Options:
        -t = time (Optional)
        -j = job file (ktr or kjb)
        -l = bug level in pdi:
             Error: Only show errors
             Nothing: Don't show any output
             Minimal: Only use minimal logging
             Basic: This is the default basic logging level (Default)
             Detailed: Give detailed logging output
             Debug: For debugging purposes, very detailed output.
             Rowlevel: Logging at a row level, this can generate a lot of data.
        -e = dynamic envairoment (please see the secction enviaroment) (Optional)
        -p = path of pdi (Optinal)
        -ln= path of log folder (Optinal)
EOF
_die 0
}

function stove() {
 local enviroment=${1:-''}
 local job=${2:-''}
 local log_name=${3:-''}
 local debug_level=${4:-'Basic'}
 local timer=${5:-''}


 local now=$(date -u +%Y%0m%0d%H%M%S)
 local log_pattor="${log_name}_${now}.log"


 setEnvironment $enviroment
 setPath

 ##
 # ::if don't exit the job ::
 #
 if [[ ! -f $job ]] ; then
   _die "Error!!!! the ETL process don't exist please check the path" 4
 fi


 cd $kettle_path

 if [[ $job =~ \.kjb$ ]]; then
    cmd="$timer ./kitchen.sh -file=$job -level=$debug_level | tee -a $kettle_log$log_pattor"
 else
    cmd="$timer ./pan.sh -file=$job -level=$debug_level | tee -a  $kettle_log$log_pattor"
 fi

 echo $kettle_path
 _create_mutex $log_pattor | tee -a $kettle_log$log_pattor 2>&1 || exit 1

 _console "Executing: $cmd"
 
 sleep 1
 eval $cmd 2 | tee -a $kettle_log$log_pattor  

 _remove_mutex $log_pattor

 EXIT_STATUS=$?
 
 case  $EXIT_STATUS  in
  0) _console "The job ran without a problem." | tee -a $kettle_log$log_pattor ;;
  1) _console "Errors occurred during processing" | tee -a $kettle_log$log_pattor ;;
  2) _console "An unexpected error occurred during loading / running of the job" | tee -a $kettle_log$log_pattor ;;
  7) _console "The job couldn't be loaded from XML or the Repository" | tee -a $kettle_log$log_pattor ;;
  8) _console "Error loading steps or plugins (error in loading one of the plugins mostly)" | tee -a $kettle_log$log_pattor ;;
  9) _console "Command line usage printing" | tee -a $kettle_log$log_pattor ;;
  *) _console "Unknown error code: $?" | tee -a $kettle_log$log_pattor ;;
 esac

 if [[ $EXIT_STATUS -ne "0" ]]; then 
      rm -rf $log_name.pdi
     _die "ERROR log_pattor" 1 | tee -a $kettle_log$log_pattor 
 fi

}


##
# ::main::
#
while getopts ":j:l:e:p:ln:k:ht" opts; do
      case ${opts} in
           t)  timer;;
           j)  JOB=${OPTARG} ;;
           l)  LOGNAME=${OPTARG};;
           n)  DEBUGLEVEL=${OPTARG};;
           e)  ENVIROMENT=${OPTARG};;
           h)  help;;
      esac
done

shift $((OPTIND-1))

##
# ::launcher::
#
stove $ENVIROMENT $JOB $LOGNAME $DEBUGLEVEL $TIMER
