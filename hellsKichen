# @sowe <ravamo@gmail.com>
# blog: redcloverbi.wordpress.com
# http://type-exit.org/adventures-with-open-source-bi/2010/07/prevent-running-multiple-instances-of-a-kettle-job/
#!/bin/bash

set -e # try-cacht
set -u


TIME='time'
JOB=''
KETTLE_HOME="$HOME/live"
KETTLE_JNDI_ROOT=''
DEBUGLEVEL="Minimal"
LOGNAME=''
KETTLE_PAT=''
KETTLE_LOG=''
ENVIROMENT="$HOME/live"
VERSION='0.2'
LOCKFILE=true

function _console(){
    local message=${1:-''}
    [[ -n "$message" ]] && echo -e "$message"
}

function _die(){
    local message=${1:-''}
    local exit_code=${2:-0}
    _console "$message"
    exit $exit_code
}

function lock_process(){
  lockfile=job.lock
  pidfile=job.pid
  retval=1

  if ( set -o noclobber; echo "$PPID" > "$lockfile") 2> /dev/null; 
  then
 
      trap 'rm -f "$lockfile"; exit $?' INT TERM EXIT
 
    if [ ! -e $pidfile ]; then
        _console "pid file does not exist, creating for kettle PID $PPID"
        _console "$PPID" > "$pidfile" 
        retval=0
    else
        savedpid=`cat "$pidfile"`
        _console "pid file exists, checking if process $savedpid is a running kettle process"
        valid=`ps -aef | grep $savedpid | grep 'pentaho' | wc -l | sed -e 's/\s//g'`
         
        if [ 1 -eq $valid ]; then
            _console "kettle process $savedpid found, exiting"
            retval=1
        else  
            _console "stale kettle process $savedpid not found, will continue"
            _console "$PPID" > "$pidfile" 
            retval=0
        fi
    fi
    rm -f "$lockfile"
    trap - INT TERM EXIT
else
    _console "Failed to acquire lockfile: $lockfile."
    _console "Held by $(cat $lockfile)"
    retval=1
fi
 
_die $retval

}


function _status_pdi(){
  case  $?  in
      0) _console "The job ran without a problem." ;;
      1) _die "Errors occurred during processing" ;;
      2) _die "An unexpected error occurred during loading / running of the job" ;;
      7) _die "The job couldn't be loaded from XML or the Repository" ;;
      8) _die "Error loading steps or plugins (error in loading one of the plugins mostly)";;
      9) _die "Command line usage printing" ;;
      *) _die "Unknown error code: $?" ;;
  esac
}



function setEnvironment
{
    local kettlehome=${1:-$KETTLE_HOME}
    echo $kettlehome
    export KETTLE_HOME=$kettlehome
    export KETTLE_JNDI_ROOT=$KETTLE_HOME

    if [ -z "$KETTLE_PAT" ]; then
     source  "$KETTLE_HOME/hellkitchen.properties"
    fi

    if [ -z "$KETTLE_LOG" ]; then
     source  "$KETTLE_HOME/hellkitchen.properties"
    fi
    echo -e "Parameters PDI:" $kettle_path "and LOGS" $kettle_log
}

function getVersion(){
   _console 'PDI version:'
   cd $kettle_path
   ./kitchen -version | grep "Kitchen - Kettle version"
    _console 'hellskitchen version: $VERSION'
}

function help {
_console "====================[HELP]======================================"
_console " -t  | --times  time excution (time or empty)"
_console " -j  | --job   the job name and path"
_console " -ll | --loglevel  the log level "
_console ">>>>>>>>>> Nothing: Don't show any output"
_console ">>>>>>>>>> Minimal: Only use minimal logging"
_console ">>>>>>>>>> Basic: This is the default basic logging level (Default)"
_console ">>>>>>>>>> Detailed: Give detailed logging output"
_console ">>>>>>>>>> Debug: For debugging purposes, very detailed output."
_console ">>>>>>>>>> Rowlevel: Logging at a row level, this can generate a lot of data."
_console ">>>>>>>>>> Stream: No log show the content"
_console " -ln | --logname  the log name with the date and hour of execution"
_console " -e  | --enviroment  dynamic envairoment(live,docker,pre)"
_console " -p  | --pdi if you want to change the pdi version in a excution"
_console " -l  | --log if you want to change the log folder in a excution"
_console " -h  | --help this is a help about the script"
_console " -v  | --version version (pdi and  hellskitchen)"
_console "================================================================"
exit
}

function engine {
  local job=${1:-''}

  if [[ $job =~ \.kjb$ ]]; then
       engine="kichen"
  else
       engine="pan"
  fi
}

function hellskitchen {
  local timer=${1:-''}
  local job=${2:-''}
  local debug_level=${3:-''}
  local log_name=${4:-''}
  local environment=${5:-''}
  local now=$(date -u +%Y%0m%0d%H%M%S)
  local log_pattor="${kettle_log}${log_name}_${now}.log"

  cd $kettle_path

  engine $job

  if [ "$debug_level" == "Stream" ]; then
	cmd="$timer ./$engine -file=$job -level=$debug_level"
  else
	cmd="$timer ./$engine -file=$job -level=$debug_level >> $log_pattor"
  fi

  _console "Executing: $cmd"
  sleep 10
  eval $cmd
  _status_pdi
}

##
# ::main::
#
for i in `seq 1 $#`; do
  eval OPTION="\$$i"
  OPTARG=$(echo $OPTION | cut -d'=' -f2)
  OPTION=$(echo $OPTION | cut -d'=' -f1)
  case $OPTION in
  -t  | --times       ) TIME=${OPTARG};;
  -j  | --job         ) JOB=${OPTARG};;
  -ll | --loglevel    ) DEBUGLEVEL=${OPTARG};;
  -ln | --logname     ) LOGNAME=${OPTARG};;
  -e  | --enviroment  ) ENVIROMENT=${OPTARG};;
  -p  | --pdi         ) kettle_path=${OPTARG};;
  -l  | --log         ) KETTLE_LOG=${OPTARG};;
  -s  | --save        ) LOCKFILE=${OPTARG};;
  -v  | --version     ) getVersion;;
	-h  | --help        ) help;;
  esac
done

if[$lockfile] ; then
  lock_process || setEnvironment $ENVIROMENT || hellskitchen $TIME $JOB $DEBUGLEVEL $LOGNAME $ENVIROMENT
else
  setEnvironment $ENVIROMENT || hellskitchen $TIME $JOB $DEBUGLEVEL $LOGNAME $ENVIROMENT
fi