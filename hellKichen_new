#!/bin/bash

set -e
set -u

TIMER=''
JOB=''
KETTLE_HOME=''
KETTLE_JNDI_ROOT=''
DEBUGLEVEL=''
LOGNAME=''
KETTLE_HOME=''
KETTLE_JNDI_ROOT=''

function setEnvironment
{
    export KETTLE_HOME=$1
    export KETTLE_JNDI_ROOT=$KETTLE_HOME
}

function _console(){
    local message = ${1:-''}
    [[ -n "$message" ]] && echo -e "$message"
}

function _die(){
    local message = ${1:-''}
    local exit_code = ${2:-0}
    _console "$message"
    exit $exit_code
}

function timer(){
 export TIMER='time';
}

function help (){
cat <<EOF
    Usage: hells_kitchen.sh <[options]>
    Options:
        -t = time
        -j = job file (ktr or kjb)
        -l = bug level in pdi:
             Error: Only show errors
             Nothing: Don't show any output
             Minimal: Only use minimal logging
             Basic: This is the default basic logging level
             Detailed: Give detailed logging output
             Debug: For debugging purposes, very detailed output.
             Rowlevel: Logging at a row level, this can generate a lot of data.
        -e = dynamic envairoment (please see the secction enviaroment)
        -p = path of pdi
        -ln= path of log folder
EOF
    _die
}

function stove (){

    local job=${1:-''}
    local debug_level=${2:-''}
    local log_name=${3:-''}
    local now=$(date -u +%Y%0m%0d%H%M%S)
    local log_pattor="${kettle_log}${log_name}_${now}.log"
    local environment=${4:-''}
    local timer=${5:-''}    

    cd $kettle_path
    if [[ $job =~ \.kjb$ ]]; then
        cmd="$timer ./kitchen.sh -file=$job -level=$debug_level  >> $log"
    else
        cmd="$timer ./pan.sh -file=$job -level=$debug_level  >> $log"
    fi

    _console "Executing: $cmd"

    sleep 1
    eval $cmd 2>>$log
    case  $?  in
        0) _console "The job ran without a problem." >> $log ;;
        1) _console "Errors occurred during processing" >> $log ;;
        2) _console "An unexpected error occurred during loading / running of the job" >> $log ;;
        7) _console "The job couldn't be loaded from XML or the Repository" >> $log ;;
        8) _console "Error loading steps or plugins (error in loading one of the plugins mostly)" >> $log ;;
        9) _console "Command line usage printing" >> $log ;;
        *) _console "Unknown error code: $?" >> $log ;;
    esac 
}


##
# ::main::
#
while getopts "t:j:l:e:p:ln:h" opts; do
      case ${opts} in
           t)  LOAD_FILE=${OPTARG} ;;
           j)  LOG_LEVEL=${OPTARG} ;;
           l)  help;;
           e)  help;;
           p)  help;;
           ln) help;;
           h)  help;;
          \?)  echo "" ;;
           :)  echo "" ;;
      esac
 done
